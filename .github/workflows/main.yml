name: CI/CD workflows
env:
    WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web:${{ github.sha }}
    NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx:${{ github.sha }}

on:
  pull_request:
    types: [closed]
    branches: [develop]

jobs:

  build-dev-server:
    name: Build Staging Docker Images
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout main
        uses: actions/checkout@v2
      - name: Add environment variables to .env
        run: |
          echo DEBUG="${{ secrets.DEBUG }}" >> .env
          echo SERVER_TYPE=dev >> .env

          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
          echo ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}" >> .env

          echo DJANGO_SUPERUSER_PASSWORD="${{ secrets.DJANGO_SUPERUSER_PASSWORD }}" >> .env
          echo DJANGO_SUPERUSER_USERNAME="${{ secrets.DJANGO_SUPERUSER_USERNAME }}" >> .env
          echo DJANGO_SUPERUSER_EMAIL="${{ secrets.DJANGO_SUPERUSER_EMAIL }}" >> .env

          echo CORS_ORIGIN_ALLOW_ALL="${{ secrets.CORS_ORIGIN_ALLOW_ALL }}" >> .env
          echo STAGING_IP_ADDRESS="${{ secrets.STAGING_IP_ADDRESS }}" >> .env

          echo NAMESPACE="${{ secrets.NAMESPACE }}" >> .env
          echo PERSONAL_ACCESS_TOKEN="${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> .env

          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env

      - name: Set environment variables
        run: |
          echo "WEB_IMAGE=$(echo ${{env.WEB_IMAGE}} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV
          
      - name: Log in to GitHub Container Registry
        run: echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      - name: Pull images
        run: |
          docker pull "${{ env.WEB_IMAGE }}" || true
          docker pull "${{ env.NGINX_IMAGE }}" || true
      
      - name: Build staging images
        run: |
          docker compose -f docker-compose.ci.yml build
      - name: Push images
        run: |
          docker push "${{ env.WEB_IMAGE }}"
          docker push "${{ env.NGINX_IMAGE }}"

  deploy-dev-server:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: build-dev-server
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Add environment variables to .env
        run: |
          echo DEBUG="${{ secrets.DEBUG }}" >> .env
          echo SERVER_TYPE=dev >> .env

          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env
          echo ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }}" >> .env

          echo DJANGO_SUPERUSER_PASSWORD="${{ secrets.DJANGO_SUPERUSER_PASSWORD }}" >> .env
          echo DJANGO_SUPERUSER_USERNAME="${{ secrets.DJANGO_SUPERUSER_USERNAME }}" >> .env
          echo DJANGO_SUPERUSER_EMAIL="${{ secrets.DJANGO_SUPERUSER_EMAIL }}" >> .env

          echo PRIVATE_KEY="${{ secrets.PRIVATE_KEY }}" >> .env

          echo CORS_ORIGIN_ALLOW_ALL="${{ secrets.CORS_ORIGIN_ALLOW_ALL }}" >> .env
          echo STAGING_IP_ADDRESS="${{ secrets.STAGING_IP_ADDRESS }}" >> .env

          echo NAMESPACE="${{ secrets.NAMESPACE }}" >> .env
          echo PERSONAL_ACCESS_TOKEN="${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> .env

          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Deploy to VPS
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          
          scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.cd.yml root@${{ secrets.STAGING_IP_ADDRESS }}:/app
          ssh -o StrictHostKeyChecking=no root@${{ secrets.STAGING_IP_ADDRESS }} << 'ENDSSH'
            cd /app
            source .env
            docker login ghcr.io -u ${{ secrets.NAMESPACE }} -p ${{ secrets.PERSONAL_ACCESS_TOKEN }}

            # force docker to remove all images and orphaned images
            # docker rmi $(docker images -q)

            
            docker pull $WEB_IMAGE
            docker pull $NGINX_IMAGE

            # Use docker-compose if available
            
            echo "Attempting to use docker-compose..."
            try_docker_compose() {
                docker-compose -f docker-compose.cd.yml up -d
            }

            try_docker_compose || {

                # Fallback to docker compose (new CLI version)
                echo "docker-compose failed, trying docker compose..."
                try_docker_compose_new_cli() {
                    docker compose --file docker-compose.cd.yml up -d
                }

                try_docker_compose_new_cli || {
                    echo "Both docker-compose and docker compose failed. Ensure Docker Compose is installed"
                    exit 1
                }
            }

            echo "Deployment complete!"
            
          ENDSSH

  